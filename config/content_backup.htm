<h1>個人網站</h1>
<p>..test</p>
<h1>二下</h1>
<h2>arduino 機械手臂</h2>
<p>概述:</p>
<p>用PS2手把控制，可以使用arduino有一個PS2的函式庫(PS2X_lib.h)進行控制</p>
<p>馬達的部分是使用MG996R進行控制</p>
<p>又因為馬達需要額外供電所以會有一個額外的5V供電 </p>
<p></p>
<p>files:</p>
<p><a href="https://github.com/Blinhy0131/Arduino-robot-arm">https://github.com/Blinhy0131/Arduino-robot-arm</a></p>
<p>材質:3D列印</p>
<p><img alt="" height="440" src="/images/機械手臂.jpg" width="399"/></p>
<p>電路圖參考</p>
<p><img caption="false" height="429" src="/images/機械手臂電路.jpg" width="800"/></p>
<p></p>
<h1>CoppliaSim程式模擬</h1>
<h2>架設場景</h2>
<h3>對軸進行旋轉控制</h3>
<p>使用coppeliaSim 先叫出一個簡單的軸</p>
<p>來進行模擬控制</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9m9_lNlXvfA" width="560"></iframe></p>
<p></p>
<h3>對方快進行XYZ軸控制</h3>
<p></p>
<p>建立方塊並且對其進行XYZ軸控制</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/d_3A25jRKEs" width="560"></iframe></p>
<p></p>
<p>程式碼如下</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    joint01=sim.getObjectHandle('joint01')
    joint02=sim.getObjectHandle('joint02')
    joint03=sim.getObjectHandle('joint03')
    set=0
    set1=0
    set2=0
end

function sysCall_actuation()
    -- put your actuation code here
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==2009) then
                set=set+0.01
                sim.setJointTargetPosition(joint01,set)
            end
            if (auxiliaryData[1]==2010) then
                set=set-0.01
                sim.setJointTargetPosition(joint01,set)
            end
            if (auxiliaryData[1]==2007) then
               set1=set1+0.01
               sim.setJointTargetPosition(joint02,set1)
            end
           if (auxiliaryData[1]==2008) then
              set1=set1-0.01
              sim.setJointTargetPosition(joint02,set1)
            end
            if (auxiliaryData[1]==50) then
               set2=set2+0.01
               sim.setJointTargetPosition(joint03,set2)
            end
           if (auxiliaryData[1]==56) then
              set2=set2-0.01
              sim.setJointTargetPosition(joint03,set2)
            end
        end
    message,auxiliaryData=sim.getSimulatorMessage()
    end
end</pre>
<p></p>
<h3>物件螺旋運動</h3>
<p>使用現成<span>腳本使方塊進行螺旋運動</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4_rgcQVmUs0" width="560"></iframe></span></p>
<p>code</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_threadmain()
    jointx=sim.getObjectHandle('01')
    jointy=sim.getObjectHandle('02')
    jointz=sim.getObjectHandle('03')
    high=0
    
    for cycle=0,36000,1 do
        sim.setJointTargetPosition(jointx,0.3*(math.sin(cycle*math.pi/180)))
        sim.wait(0.01)
        sim.setJointTargetPosition(jointy,0.3*(math.cos(cycle*math.pi/180)))
        sim.wait(0.01)
        high=high+0.001
        sim.setJointTargetPosition(jointz,high)
        sim.wait(0.01)
        
    end
end</pre>
<p></p>
<h3>3D列印機_控制噴嘴</h3>
<p></p>
<p>控制:</p>
<p>上下左右控制噴頭的上下左右</p>
<p>空白鍵往上</p>
<p>C鍵往下</p>
<p></p>
<p></p>
<p>圖檔下載</p>
<p><a href="/downloads/3D print.ttt">3D print.ttt</a></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4jODRQz8fxY" width="560"></iframe></p>
<p>程式參考</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    joint01=sim.getObjectHandle('X')
    joint02=sim.getObjectHandle('Y')
    joint03=sim.getObjectHandle('Z')
    set=0
    set1=0
    set2=0
    s=0.005
end

function sysCall_actuation()
    -- put your actuation code here
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==2009) then
                set=set+s
                sim.setJointTargetPosition(joint01,set)
                print(sim.getJointPosition(joint01))
            end
            if (auxiliaryData[1]==2010) then
                set=set-s
                sim.setJointTargetPosition(joint01,set)
            end
            if (auxiliaryData[1]==2007) then
               set1=set1+s
               sim.setJointTargetPosition(joint02,set1)
            end
           if (auxiliaryData[1]==2008) then
              set1=set1-s
              sim.setJointTargetPosition(joint02,set1)
            end
            if (auxiliaryData[1]==32) then
               set2=set2+s
               sim.setJointTargetPosition(joint03,set2)
            end
           if (auxiliaryData[1]==99) then
              set2=set2-s
              sim.setJointTargetPosition(joint03,set2)
            end
        end
    message,auxiliaryData=sim.getSimulatorMessage()
    end
end</pre>
<p></p>
<h3>3D列印機_自動繪製</h3>
<p>自動繪製正方體</p>
<p><a href="/downloads/3D print AutoControl cube.ttt">3D print AutoControl cube.ttt</a></p>
<p>自動繪製圓柱體</p>
<p><a href="/downloads/3D print AutoControl circle.ttt">3D print AutoControl circle.ttt</a></p>
<p>自動繪製心臟線</p>
<p><a href="/downloads/3D print AutoControl Cardioid.ttt">3D print AutoControl Cardioid.ttt</a></p>
<p>參考影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SJTnSvzHhiA" width="560"></iframe></p>
<p>程式參考:</p>
<p>1.正方體</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">find_Position=function()
XYZ={xp, yp, zz, step}
end
function sysCall_threadmain()
    joint01=sim.getObjectHandle('X')
    joint02=sim.getObjectHandle('Y')
    joint03=sim.getObjectHandle('Z')
    grap=sim.getObjectHandle('Graph')
    set=0
    set1=0
    set2=0
    s=0.01
    step=1
    xp=0
    yp=0
    zz=0
    xstep=0
    ystep=0
    zstep=0
    cubesize=10
    t=1
    
    
    while zstep&lt;=cubesize do
        while step&lt;cubesize do --go++
            while xstep&lt;=step do
                xp=xp+s
                sim.setJointTargetPosition(joint01,xp)
                find_Position()
                print(XYZ)
                xstep=xstep+1
                sim.wait(t)
            end
            while ystep&lt;=step do
                yp=yp+s
                sim.setJointTargetPosition(joint02,yp)
                find_Position()
                print(XYZ)
                ystep=ystep+1
                sim.wait(t)
            end
            --step=step+1
            xstep=0
            ystep=0    
            while xstep&lt;=step do
                xp=xp-s
                sim.setJointTargetPosition(joint01,xp)
                find_Position()
                print(XYZ)
                xstep=xstep+1
                sim.wait(t)
            end
            while ystep&lt;=step do --go--
                yp=yp-s
                sim.setJointTargetPosition(joint02,yp)
                find_Position()
                print(XYZ)
                ystep=ystep+1
                sim.wait(t)
            end
            if step &lt; (cubesize-1) then
                xp=xp-0.5*s
                yp=yp-0.5*s
                sim.setJointTargetPosition(joint01,xp)
                sim.setJointTargetPosition(joint02,yp)
                find_Position()
                print(XYZ)
            end
            step=step+1
            sim.wait(t)
            xstep=0
            ystep=0
        end
        step=1
        zz=zz+s
        sim.setJointTargetPosition(joint03,zz)
        find_Position()
        print(XYZ)
        zstep=zstep+1
        sim.wait(t)
        xp=0
        yp=0
        sim.setJointTargetPosition(joint01,xp)
        sim.setJointTargetPosition(joint02,yp)
        find_Position()
        print(XYZ)
        sim.wait(t)
    end
    
end

function sysCall_cleanup()
      
    
end

-- See the user manual or the available code snippets for additional callback functions and details
</pre>
<p>2. 圓柱體</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_threadmain()
    joint01=sim.getObjectHandle('X')
    joint02=sim.getObjectHandle('Y')
    joint03=sim.getObjectHandle('Z')
    grap=sim.getObjectHandle('Graph')
    set=0
    set1=0
    set2=0
    s=0.01
    step=1
    r=0.005
    rset=0.01
    zz=0
    zstep=1
    dz=0.01
    rstep=1
    cubesize=10
    t=0.01
    angle=0
    angleset=2
    
end

function sysCall_cleanup()
    while zstep&lt;=20 do
        while rstep&lt;=5 do
            while angle~=360 do
                angle=angle+angleset
                sim.setJointTargetPosition(joint01,r*(math.sin(angle*math.pi/180)))
                sim.setJointTargetPosition(joint02,r*(math.cos(angle*math.pi/180)))
                sim.wait(t)
            end
        rstep=rstep+1
        angle=0
        r=r+rset
        print(rstep)
        end
    zz=zz+dz
    zstep=zstep+1
    sim.setJointTargetPosition(joint03,zz)
    sim.setJointTargetPosition(joint01,0)
    sim.setJointTargetPosition(joint02,0)
    rstep=1
    r=0.005
    end
    
end

-- See the user manual or the available code snippets for additional callback functions and details
</pre>
<p>3. 心臟線</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_threadmain()
    joint01=sim.getObjectHandle('X')
    joint02=sim.getObjectHandle('Y')
    joint03=sim.getObjectHandle('Z')
    grap=sim.getObjectHandle('Graph')
    set=0
    set1=0
    set2=0
    s=0.01
    step=1
    r=0.005
    rset=0.001
    zz=0
    zstep=1
    dz=0.001
    rstep=1
    cubesize=10
    t=0.5
    angle=0
    angleset=2
    
end

function sysCall_cleanup()
    while zstep&lt;=30 do
        while rstep&lt;=30 do
            while angle~=360 do
                angle=angle+angleset
                sim.setJointTargetPosition(joint01,2*r*((math.cos(angle*math.pi/180))-0.5*(math.cos(2*angle*math.pi/180))))
                sim.setJointTargetPosition(joint02,2*r*((math.sin(angle*math.pi/180))-0.5*(math.sin(2*angle*math.pi/180))))
                sim.wait(t)
            end
        rstep=rstep+1
        angle=0
        r=r+rset
        print(rstep)
        end
    zz=zz+dz
    zstep=zstep+1
    sim.setJointTargetPosition(joint03,zz)
    sim.setJointTargetPosition(joint01,0)
    sim.setJointTargetPosition(joint02,0)
    rstep=1
    r=0.005
    end
    
end

</pre>
<p></p>
<h3>3D列印機_控制高度</h3>
<p></p>
<p>控制:</p>
<p>上下左右控制噴頭的上下左右</p>
<p>空白鍵往上</p>
<p>C鍵往下</p>
<p></p>
<p></p>
<p>圖檔下載</p>
<p><a href="/downloads/3D print control altitude.ttt">3D print control altitude.ttt</a></p>
<p></p>
<p>影片參考</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zPJSsqyDkfQ" width="560"></iframe></p>
<p>程式參考:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    joint1=sim.getObjectHandle('P1')
    joint2=sim.getObjectHandle('P2')
    joint3=sim.getObjectHandle('P3')
    xp=0
    yp=0
    zp=0
    p1p=0
    p2p=0
    p3p=0
    dz=0
    step=0.01
    --sim.getJointTargetPosition(joint1,p1p)
    --sim.getJointTargetPosition(joint2,p2p)
    --sim.getJointTargetPosition(joint3,p3p)
    H=((0.290)^2-(0.1325)^2)^(1/2)
    BaseX=0.1325*(math.cos(60*math.pi/180))
    BaseY2=0.1325*(math.sin(60*math.pi/180))
    BaseY3=0.1325*(math.sin(60*math.pi/180))
end

xyz = function()
    bar1=(((0.290)^2-(0.1325-xp)^2-yp^2)^(1/2)-H+dz)
    bar2=(((0.290)^2-BaseX^2-BaseY2^2)^(1/2)-H+dz)
    bar3=(((0.290)^2-BaseX^2-BaseY3^2)^(1/2)-H+dz)
end

function sysCall_actuation()
    -- put your actuation code here
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==2010) then
                xp=xp+step
                BaseX=BaseX+step
                xyz()
                sim.setJointTargetPosition(joint1,bar1)
                sim.setJointTargetPosition(joint2,bar2)
                sim.setJointTargetPosition(joint3,bar3)
            end
            if (auxiliaryData[1]==2009) then
                xp=xp-step
                BaseX=BaseX-step
                xyz()
                sim.setJointTargetPosition(joint1,bar1)
                sim.setJointTargetPosition(joint2,bar2)
                sim.setJointTargetPosition(joint3,bar3)
            end
            if (auxiliaryData[1]==2007) then
                yp=yp+step
                BaseY2=BaseY2-step
                BaseY3=BaseY3+step
                xyz()
                sim.setJointTargetPosition(joint1,bar1)
                sim.setJointTargetPosition(joint2,bar2)
                sim.setJointTargetPosition(joint3,bar3)
            end
            if (auxiliaryData[1]==2008) then
                yp=yp-step
                BaseY2=BaseY2+step
                BaseY3=BaseY3-step
                xyz()
                sim.setJointTargetPosition(joint1,bar1)
                sim.setJointTargetPosition(joint2,bar2)
                sim.setJointTargetPosition(joint3,bar3)
            end
            if (auxiliaryData[1]==32) then
                sim.getJointTargetPosition(joint1,p1p)
                sim.getJointTargetPosition(joint2,p2p)
                sim.getJointTargetPosition(joint3,p3p)
                p1p=p1p+dz
                p2p=p2p+dz
                p3p=p3p+dz
                dz=dz+step
                printf(p1p)
                xyz()
                print(p2p)
                sim.setJointTargetPosition(joint1,bar1+dz)
                sim.setJointTargetPosition(joint2,bar2+dz)
                sim.setJointTargetPosition(joint3,bar3+dz)
                H=H-dz
            end
            if (auxiliaryData[1]==99) then
                sim.getJointTargetPosition(joint1,p1p)
                sim.getJointTargetPosition(joint2,p2p)
                sim.getJointTargetPosition(joint3,p3p)
                p1p=p1p-dz
                p2p=p2p-dz
                p3p=p3p-dz
                dz=dz-step
                printf(p1p)
                xyz()
                print(p2p)
                sim.setJointTargetPosition(joint1,bar1-dz)
                sim.setJointTargetPosition(joint2,bar2-dz)
                sim.setJointTargetPosition(joint3,bar3-dz)
                H=H-dz
            end
         end
message,auxiliaryData=sim.getSimulatorMessage()
end
    
end

function sysCall_sensing()
    -- put your sensing code here
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details
</pre>
<p></p>
<p></p>
<h3>衝擊試驗機</h3>
<p>控制說明</p>
<p>請依序按下1~4</p>
<p>分別為上升、落下、往下、接合</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/EJ-4jpUNIoc" width="560"></iframe></p>
<p></p>
<p>程式碼參考</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    jointY=sim.getObjectHandle('Prismatic_joint')
    joint1=sim.getObjectHandle('Prismatic_joint0')
    joint2=sim.getObjectHandle('Prismatic_joint1')
    cont=1
end

function sysCall_actuation()
    -- put your actuation code here
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==49) then
                if (cont==1) then
                    sim.setJointTargetPosition(jointY,40)
                    cont=2
                end
            end
            if (auxiliaryData[1]==50) then
                if (cont==2) then
                    sim.setJointTargetPosition(joint1,0.1)
                    sim.setJointTargetPosition(joint2,-0.1)
                    cont=3
                end
            end
            if (auxiliaryData[1]==51) then
                if (cont==3) then
                    sim.setJointTargetPosition(jointY,0)
                    cont=4
                end
            end
            if (auxiliaryData[1]==52) then
                if (cont==4) then
                    sim.setJointTargetPosition(joint1,0)
                    sim.setJointTargetPosition(joint2,0)
                    cont=1
                end
            end
         end
    message,auxiliaryData=sim.getSimulatorMessage()
    end
end

function sysCall_sensing()
    -- put your sensing code here
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details
</pre>
<p></p>
<h3>架設機械手臂場景</h3>
<p>將所有物件控制後直接進行模擬，檢測是否有異樣</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rUZ-taH8l-4" width="560"></iframe></p>
<h3>機械手臂場景微調</h3>
<p>嘗試使用程式控制</p>
<p>但是還是會亂跑</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wfNZQoLKPFc" width="560"></iframe></p>
<p></p>
<p></p>
<h3>機械手臂場景路徑控制</h3>
<p>勉強可以控制路徑了(預先設定</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/TPKAXlE8dSc" width="560"></iframe></p>
<p></p>
<h2>W13 Pick and Place</h2>
<p></p>
<p><a href="http://mde.tw/cd2021/content/W13.html">課程要求</a></p>
<p></p>
<h3>remoteApi</h3>
<p></p>
<p>請見task2-remoteApi-&gt;W13 remoteApi</p>
<p><a href="https://40823225.github.io/stage3-bg6/content/W13%C2%A0remoteApi.html">傳送門</a></p>
<h3>0526更新</h3>
<p>預計更新-remoteApi</p>
<p>檔案下載</p>
<p><a href="https://github.com/40823225/stage3-bg6/tree/main/downloads/W13_40823214">W13_pick and place</a></p>
<p>影片:</p>
<p>影片模擬時間為30分鐘，總共進行4次將球放到空盤再回復，理論上可以無限反覆模擬</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OeSr68lxeSU" width="560"></iframe></p>
<p><strong></strong>之前在舊版本中，會發現吸盤一直朝同一方向旋轉角度會誤差越來越大，所以在此場景中，將吸取設為正轉，放下設成反轉，即可以避免朝同一方向選轉造成的角度偏移問題</p>
<p><strong>程式構想:</strong></p>
<p>透過計算現在為拿取第幾個球，可以推算出該球在第幾層(unit)，也可以定為該層的起始座標(角落)</p>
<p>知道在第幾層後可以反推出他是該層的第幾個(finding_XY)，進一步知道他的XY座標(X_Pos/Y_Pos)</p>
<p>例: 第九顆球，可以得知在第三層，反推可以得知她是第4個，然後就可以得知她是第二排第一個，以此類推</p>
<p>而在第30顆球過後，需要重新設定基準座標還有重設數量，才有最下面if問句</p>
<p><strong>程式參考</strong></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function signal_switch(singal,enable)
    if singal==1 or singal==12 then
        sim.setIntegerSignal(modelName1 .."call_1",enable)
    end
    if singal==2 or singal==11 then
        sim.setIntegerSignal(modelName2 .."call_2",enable)
    end
    if singal==3 or singal==10 then
        sim.setIntegerSignal(modelName3 .."call_3",enable)
    end
    if singal==4 or singal==9 then
        sim.setIntegerSignal(modelName4 .."call_4",enable)
    end
    if singal==5 or singal==8 then
        sim.setIntegerSignal(modelName5 .."call_5",enable)
    end
    if singal==6 or singal==7 then
        sim.setIntegerSignal(modelName6 .."call_6",enable)
    end
end

function sysCall_threadmain()
    joint01=sim.getObjectHandle('X')
    joint02=sim.getObjectHandle('Y')
    joint03=sim.getObjectHandle('Z')
    jointr=sim.getObjectHandle('Rotate')
    tt=1
    long_t=1.5
    long_long_t=3 --time set
    rotate_deg=0 --pad rotate
    atz=0  --altitude set
    setx=0.5
    setpx=-0.5 --center pick set
    sety=-0.16
    setpy=-0.16 --center fall set
    local pick_high={"0.0645","0.134","0.2025","0.2768"} --pick up high set
    local fall_high={"0.05","0.12","0.18","0.26"} --fall high set
    local high_up={"0","0","0.05","0.12"}
    cube=1              -- set cube
    ball_pick_time=0    --total ball we pick
    ball_put_time=31     --total ball we put
    while (ball_pick_time&lt;60) do
        for ball=1,6,1 do    --pick the ball
            ball_pick_time=ball_pick_time+1 --total time we pick
            i=1
            unit=0
            level=0
            while level &lt; ball_pick_time do  --find which level and place should be of the xy coordinates
                unit=unit+1
                level=level+unit^2
            end
            finding_XY=ball_pick_time   --this is the XY on that floor
            while(i&lt;=unit-1) do            
                finding_XY=finding_XY-(i^2) 
                i=i+1
            end
            X_Pos=finding_XY%unit       -- the X and Y coordinates(by balls)
             if X_Pos==0 then
                X_Pos=unit
            end
            Y_Pos=(math.ceil(finding_XY/unit)) 
            BaseX=setx-((unit-1)*0.05)--now we need to find the 0 of the xy
            BaseY=sety-((unit-1)*0.05)
            sim.setJointTargetPosition(joint01,BaseX+(0.1*(X_Pos-1))) --move to Position
            sim.wait(tt)
            sim.setJointTargetPosition(joint02,BaseY+(0.1*(Y_Pos-1)))
            sim.wait(tt)
            signal_switch(ball,1) --switch pad on
            sim.setJointTargetPosition(joint03,-pick_high[unit])--pick the pall
            sim.wait(tt)
            sim.setJointTargetPosition(joint03,atz-high_up[unit]) --after pick up we dont need to go that high
            sim.wait(tt)
            rotate_deg=rotate_deg+60  --rotate the pad
            sim.setJointTargetPosition(jointr,rotate_deg*math.pi/180)
            sim.wait(tt)
            sim.wait(tt)
        end
        sim.wait(long_t)
        sim.setJointTargetPosition(joint01,0)
        sim.setJointTargetPosition(joint02,0)
        sim.setJointTargetPosition(joint03,0)
        sim.wait(long_t)
        for ball=1,6,1 do --put the ball
            ball_put_time=ball_put_time-1
            i=1
            unit=0
            level=0
            while level &lt; ball_put_time do  --find which level and place should be of the xy coordinates
                unit=unit+1
                level=level+unit^2
            end
            finding_XY=ball_put_time   --this is the XY on that floor
            while(i&lt;=unit-1) do            
                finding_XY=finding_XY-(i^2) 
                i=i+1
            end
            X_Pos=finding_XY%unit       -- the X and Y coordinates(by balls)
             if X_Pos==0 then
                X_Pos=unit
            end
            Y_Pos=(math.ceil(finding_XY/unit)) 
            BaseX=setpx-((unit-1)*0.05)--now we need to find the 0 of the xy
            BaseY=setpy-((unit-1)*0.05)
            rotate_deg=rotate_deg-60  --rotate the pad
            sim.setJointTargetPosition(jointr,rotate_deg*math.pi/180)
            sim.wait(tt)
            sim.setJointTargetPosition(joint01,BaseX+(0.1*(X_Pos-1))) --move to Position
            sim.wait(tt)
            sim.setJointTargetPosition(joint02,BaseY+(0.1*(Y_Pos-1)))
            sim.wait(tt)
            sim.setJointTargetPosition(joint03,-fall_high[unit])--pick the pall
            sim.wait(tt)
            signal_switch(ball+6,0) --switch pad off
            sim.wait(tt)
            sim.setJointTargetPosition(joint03,atz-high_up[unit]) --after pick up we dont need to go that high
            sim.wait(tt)
            sim.wait(tt)
        end
        sim.wait(long_t)
        sim.setJointTargetPosition(joint01,0)
        sim.setJointTargetPosition(joint02,0)
        sim.setJointTargetPosition(joint03,0)
        sim.wait(long_t)
        if ball_pick_time==30 then
            pick_high={"0.07","0.138","0.2085","0.28"}
            setx=-setx
            setpx=-setpx
            ball_pick_time=0
            ball_put_time=31
        end
    end
end</pre>
<p></p>
<h3>舊版本</h3>
<p>預計更新內容:將簡化程式碼</p>
<p>圖檔:</p>
<p><a href="/downloads/W13 Pick and Place.ttt">W13 Pick and Place.ttt</a></p>
<p>5/21 拍攝</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YbOUjoNXhgI" width="560"></iframe></p>
<p></p>
<p>程式碼參考</p>
<p>主程式</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function signal_on()
    signal_1(true)
    signal_2(true)
    signal_3(true)
    signal_4(true)
    signal_5(true)
    signal_6(true)
end

function signal_1(enable)
    modelBase1=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName1=sim.getObjectName(modelBase1)
    if enable then
        sim.setIntegerSignal(modelName1 .."call_1",1)
    else
        sim.setIntegerSignal(modelName1 .."call_1",0)
    end
end

function signal_2(enable)
    modelBase2=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName2=sim.getObjectName(modelBase2)
    if enable then
        sim.setIntegerSignal(modelName2 .."call_2",1)
    else
        sim.setIntegerSignal(modelName2 .."call_2",0)
    end
end

function signal_3(enable)
    modelBase3=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName3=sim.getObjectName(modelBase3)
    if enable then
        sim.setIntegerSignal(modelName3 .."call_3",1)
    else
        sim.setIntegerSignal(modelName3 .."call_3",0)
    end
end

function signal_4(enable)
    modelBase4=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName4=sim.getObjectName(modelBase4)
    if enable then
        sim.setIntegerSignal(modelName4 .."call_4",1)
    else
        sim.setIntegerSignal(modelName4 .."call_4",0)
    end
end

function signal_5(enable)
    modelBase5=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName5=sim.getObjectName(modelBase5)
    if enable then
        sim.setIntegerSignal(modelName5 .."call_5",1)
    else
        sim.setIntegerSignal(modelName5 .."call_5",0)
    end
end

function signal_6(enable)


    modelBase6=sim.getObjectAssociatedWithScript(sim.handle_self)
    modelName6=sim.getObjectName(modelBase6)
    if enable then
        sim.setIntegerSignal(modelName6 .."call_6",1)
    else
        sim.setIntegerSignal(modelName6 .."call_6",0)
    end
end


function sysCall_threadmain()
    on=true
    joint01=sim.getObjectHandle('X')
    joint02=sim.getObjectHandle('Y')
    joint03=sim.getObjectHandle('Z')
    jointr=sim.getObjectHandle('Rotate')
    secc=sim.getScriptHandle('suctionPad')
    dx=0
    dy=0
    dz=0
    dr=0
    dt=0.01
    tt=1
    long_t=1.5
    long_long_t=3
    aty=0
    setx=0.5
    setpx=-0.5
    sety=-0.16
    setpy=-0.16
    pick_h1=0.0645
    pick_h2=0.134
    pick_h3=0.2025
    pick_h4=0.2768
    fall_h4=0.26
    fall_h3=0.18
    fall_h2=0.12
    fall_h1=0.05
    fall_h4_up=0.12
    fall_h3_up=0.05
    while (on==true) do
    signal_1(true)
    sim.setJointTargetPosition(joint01,setx) --pick_1
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_2 h2-h2-
    sim.setJointTargetPosition(joint02,sety-0.05)
    sim.wait(tt)
    signal_2(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_3
    sim.setJointTargetPosition(joint02,sety+0.05)
    sim.wait(tt)
    signal_3(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_4
    sim.setJointTargetPosition(joint02,sety+0.05)
    sim.wait(tt)
    signal_4(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_5
    sim.setJointTargetPosition(joint02,sety-0.05)
    sim.wait(tt)
    signal_5(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.1) --pick_6 h3-h3
    sim.setJointTargetPosition(joint02,sety+0.1)
    sim.wait(tt)
    signal_6(true)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_t)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 1
    sim.wait(tt)
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 2
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 3
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 4
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 5
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 6
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx+0.1) --pick_7
    sim.setJointTargetPosition(joint02,sety)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.1) --pick_8
    sim.setJointTargetPosition(joint02,sety-0.1)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) --pick_9
    sim.setJointTargetPosition(joint02,sety-0.1)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) --pick_10
    sim.setJointTargetPosition(joint02,sety)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) --pick_11
    sim.setJointTargetPosition(joint02,sety+0.1)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.1) --pick_12
    sim.setJointTargetPosition(joint02,sety+0.1)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_t)
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 7
    sim.wait(tt)
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 8
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-0.12)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 9
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 10
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 11
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 12
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx-0.1) --pick_13
    sim.setJointTargetPosition(joint02,sety)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.1) --pick_14 
    sim.setJointTargetPosition(joint02,sety-0.1)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_15 --h4-h4
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_16
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_17
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_18
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_t)
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 13
    sim.wait(tt)
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 14
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 15
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 16
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.1)--fall 17 h3--h3
    sim.setJointTargetPosition(joint02,setpy-0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.1)--fall 18
    sim.setJointTargetPosition(joint02,setpy-0)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_19
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_20 
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_21
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_22
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_23
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_24
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_t)
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx+0.1)--fall 19
    sim.wait(tt)
    sim.setJointTargetPosition(joint02,setpy+0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 20
    sim.setJointTargetPosition(joint02,setpy+0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 21
    sim.setJointTargetPosition(joint02,setpy)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 22
    sim.setJointTargetPosition(joint02,setpy-0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.1)--fall 23
    sim.setJointTargetPosition(joint02,setpy-0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.1)--fall 24
    sim.setJointTargetPosition(joint02,setpy-0)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_25
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_26 
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_27
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_28
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_29
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_30
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_long_t)
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx-0.1)--fall 25
    sim.wait(long_long_t)
    sim.setJointTargetPosition(joint02,setpy+0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 26
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 27
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 28
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 29
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 30
    sim.setJointTargetPosition(joint02,setpy)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h1)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    ----------------------------------------------
    sim.setJointTargetPosition(joint01,0) 
    sim.setJointTargetPosition(joint02,0)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    -----------------------------------------------------------
    -----------------------------------------------------------
    pick_h1=0.07
    pick_h2=0.138
    pick_h3=0.2085
    pick_h4=0.28
    setx=-0.51
    setpx=0.49
    signal_1(true)
    sim.setJointTargetPosition(joint01,setx) --pick_1
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_2 h2-h2-
    sim.setJointTargetPosition(joint02,sety-0.05)
    sim.wait(tt)
    signal_2(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_3
    sim.setJointTargetPosition(joint02,sety+0.05)
    sim.wait(tt)
    signal_3(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_4
    sim.setJointTargetPosition(joint02,sety+0.05)
    sim.wait(tt)
    signal_4(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_5
    sim.setJointTargetPosition(joint02,sety-0.05)
    sim.wait(tt)
    signal_5(true)
    sim.setJointTargetPosition(joint03,aty-pick_h2)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.1) --pick_6 h3-h3
    sim.setJointTargetPosition(joint02,sety+0.1)
    sim.wait(tt)
    signal_6(true)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_t)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 1
    sim.wait(tt)
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 2
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 3
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.15)--fall 4
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 5
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 6
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx+0.1) --pick_7
    sim.setJointTargetPosition(joint02,sety)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.1) --pick_8
    sim.setJointTargetPosition(joint02,sety-0.1)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) --pick_9
    sim.setJointTargetPosition(joint02,sety-0.1)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) --pick_10
    sim.setJointTargetPosition(joint02,sety)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) --pick_11
    sim.setJointTargetPosition(joint02,sety+0.1)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.1) --pick_12
    sim.setJointTargetPosition(joint02,sety+0.1)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_t)
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 7
    sim.wait(tt)
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 8
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-0.12)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 9
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 10
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 11
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 12
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx-0.1) --pick_13
    sim.setJointTargetPosition(joint02,sety)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.1) --pick_14 
    sim.setJointTargetPosition(joint02,sety-0.1)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h3)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_15 --h4-h4
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_16
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_17
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.15) --pick_18
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_long_t)
    
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 13
    sim.wait(long_long_t)
    sim.setJointTargetPosition(joint02,setpy-0.15)
    sim.wait(long_long_t)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 14
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 15
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.15)--fall 16
    sim.setJointTargetPosition(joint02,setpy+0.15)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h4_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.1)--fall 17 h3--h3
    sim.setJointTargetPosition(joint02,setpy-0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.1)--fall 18
    sim.setJointTargetPosition(joint02,setpy-0)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_19
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_20 
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_21
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx-0.05) --pick_22
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_23
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_24
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_t)
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx+0.1)--fall 19
    sim.wait(tt)
    sim.setJointTargetPosition(joint02,setpy+0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 20
    sim.setJointTargetPosition(joint02,setpy+0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 21
    sim.setJointTargetPosition(joint02,setpy)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 22
    sim.setJointTargetPosition(joint02,setpy-0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.1)--fall 23
    sim.setJointTargetPosition(joint02,setpy-0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.1)--fall 24
    sim.setJointTargetPosition(joint02,setpy-0)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx) 
    sim.setJointTargetPosition(joint02,sety)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_25
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_1(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.05) --pick_26 
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_2(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_27
    sim.setJointTargetPosition(joint02,sety-0.15)
    signal_3(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_28
    sim.setJointTargetPosition(joint02,sety-0.05)
    signal_4(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_29
    sim.setJointTargetPosition(joint02,sety+0.05)
    signal_5(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setx+0.15) --pick_30
    sim.setJointTargetPosition(joint02,sety+0.15)
    signal_6(true)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-pick_h4)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(long_long_t)
     -----------------------------------------------------------
    sim.setJointTargetPosition(joint01,setpx-0.1)--fall 25
    sim.wait(long_long_t)
    sim.setJointTargetPosition(joint02,setpy+0.1)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3)
    sim.wait(tt)
    signal_1(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h3_up)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,60*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 26
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_2(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,120*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx-0.05)--fall 27
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_3(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,180*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 28
    sim.setJointTargetPosition(joint02,setpy-0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_4(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,240*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx+0.05)--fall 29
    sim.setJointTargetPosition(joint02,setpy+0.05)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h2)
    sim.wait(tt)
    signal_5(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,300*math.pi/180)
    sim.wait(tt)
    sim.setJointTargetPosition(joint01,setpx)--fall 30
    sim.setJointTargetPosition(joint02,setpy)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty-fall_h1)
    sim.wait(tt)
    signal_6(false)
    sim.wait(tt)
    sim.setJointTargetPosition(joint03,aty)
    sim.wait(tt)
    ----------------------------------------------
    sim.setJointTargetPosition(joint01,0) 
    sim.setJointTargetPosition(joint02,0)
    setx=0.5
    setpx=0.5
    sim.wait(tt)
    sim.setJointTargetPosition(jointr,0*math.pi/180)
    sim.wait(tt)
    -----------------------------------------------------------
    end
end

function sysCall_cleanup()
    -- Put some clean-up code here
end

-- See the user manual or the available code snippets for additional callback functions and details
</pre>
<p></p>
<p>吸盤程式</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    modelBase1=sim.getObjectAssociatedWithScript(sim.handle_self)
    robotBase1=modelBase1
    while true do
        robotBase1=sim.getObjectParent(robotBase1)
        if robotBase1==-1 then
            robotName1='Base'
            break
        end
        robotName1=sim.getObjectName(robotBase1)
        suffix,suffixlessName=sim.getNameSuffix(robotName1)
        if suffixlessName=='Base' then
            break
        end
    end
    sa=sim.getObjectHandle('suctionPadSensor')
    la=sim.getObjectHandle('suctionPadLoopClosureDummy1')
    l2a=sim.getObjectHandle('suctionPadLoopClosureDummy2')
    ba=sim.getObjectHandle('suctionPad')
    suctionPadLink=sim.getObjectHandle('suctionPadLink')
    local gripperBase=sim.getObjectAssociatedWithScript(sim.handle_self)

    infiniteStrength=sim.getScriptSimulationParameter(sim.handle_self,'infiniteStrength')
    maxPullForce=sim.getScriptSimulationParameter(sim.handle_self,'maxPullForce')
    maxShearForce=sim.getScriptSimulationParameter(sim.handle_self,'maxShearForce')
    maxPeelTorque=sim.getScriptSimulationParameter(sim.handle_self,'maxPeelTorque')

    sim.setLinkDummy(la,-1)
    sim.setObjectParent(la,ba,true)
    ma=sim.getObjectMatrix(l2a,-1)
    sim.setObjectMatrix(la,-1,ma)
end


function sysCall_cleanup() 
    sim.setLinkDummy(la,-1)
    sim.setObjectParent(la,ba,true)
    ma=sim.getObjectMatrix(l2a,-1)
    sim.setObjectMatrix(la,-1,ma)
end 

function sysCall_sensing() 
    parent=sim.getObjectParent(la)
    local sig=sim.getIntegerSignal(robotName1 .."call_1")
    if (not sig) or (sig==0) then
        if (parent~=ba) then
            sim.setLinkDummy(la,-1)
            sim.setObjectParent(la,ba,true)
            ma=sim.getObjectMatrix(l2a,-1)
            sim.setObjectMatrix(la,-1,ma)
        end
    else
        if (parent==ba) then
            -- Here we want to detect a respondable shape, and then connect to it with a force sensor (via a loop closure dummy dummy link)
            -- However most respondable shapes are set to "non-detectable", so "sim.readProximitySensor" or similar will not work.
            -- But "sim.checkProximitySensor" or similar will work (they don't check the "detectable" flags), but we have to go through all shape objects!
            index=0
            while true do
                shape=sim.getObjects(index,sim.object_shape_type)
                if (shape==-1) then
                    break
                end
                if (shape~=ba) and (sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)~=0) and (sim.checkProximitySensor(sa,shape)==1) then
                    -- Ok, we found a respondable shape that was detected
                    -- We connect to that shape:
                    -- Make sure the two dummies are initially coincident:
                    sim.setObjectParent(la,ba,true)
                    ma=sim.getObjectMatrix(l2a,-1)
                    sim.setObjectMatrix(la,-1,ma)
                    -- Do the connection:
                    sim.setObjectParent(la,shape,true)
                    sim.setLinkDummy(la,l2a)
                    break
                end
                index=index+1
            end
        else
            -- Here we have an object attached
            if (infiniteStrength==false) then
                -- We might have to conditionally beak it apart!
                result,force,torque=sim.readForceSensor(suctionPadLink) -- Here we read the median value out of 5 values (check the force sensor prop. dialog)
                if (result&gt;0) then
                    breakIt=false
                    if (force[3]&gt;maxPullForce) then breakIt=true end
                    sf=math.sqrt(force[1]*force[1]+force[2]*force[2])
                    if (sf&gt;maxShearForce) then breakIt=true end
                    if (torque[1]&gt;maxPeelTorque) then breakIt=true end
                    if (torque[2]&gt;maxPeelTorque) then breakIt=true end
                    if (breakIt) then
                        -- We break the link:
                        sim.setLinkDummy(la,-1)
                        sim.setObjectParent(la,ba,true)
                        ma=sim.getObjectMatrix(l2a,-1)
                        sim.setObjectMatrix(la,-1,ma)
                    end
                    
                end
            end
        end
    end
end 
</pre>
<p></p>
<h2>尋找控制代碼</h2>
<p>coppeliasim中</p>
<p>simGetSimulatorMessage()為讀取鍵盤狀態的指令</p>
<p>但是我們不知道指令是甚麼，所以寫了一段程式來檢測看每一個按鍵的指令是什麼</p>
<p>所以寫了這一支程式來檢測每一個按鈕的值</p>
<p>在coppeliaSim中叫出一個物件，然後對那個物件編寫程式如下</p>
<p>開始模擬後按下鍵盤鍵即可在下方視窗顯示對應的按鍵</p>
<p><img alt="" height="449" src="/images/findcode.jpg" width="800"/></p>
<p>程式碼如下</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_actuation()
    message,auxiliaryData=simGetSimulatorMessage()
	while message~=-1 do
		if (message==sim_message_keypress) then
			print(auxiliaryData[1])
			if (auxiliaryData[1]==string.byte(' ')) then
				-- space key was pressed
			end
		end
		message,auxiliaryData=simGetSimulatorMessage()
	end
end</pre>
<p></p>
<h2>控制解說</h2>
<p>5/11</p>
<p>方向鍵上,下，控制大臂的上下移動</p>
<p>方向鍵左,右，控制底座的旋轉</p>
<p>小鍵盤2,8 控制小臂上下移動</p>
<p>小鍵盤4,6 控制小臂的旋轉</p>
<p>小鍵盤1,3 控制手腕的轉動</p>
<p>小鍵盤0 控制小臂是否與大臂連動</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8Od8iPu0vRI" width="560"></iframe></p>
<p></p>
<h2>0513 機械手臂新增夾爪控制</h2>
<p></p>
<p>新增一夾爪與兩個攝影機</p>
<p>夾爪可以夾取物品，攝影機可以方便對正要夾取的物品</p>
<p>圖檔:</p>
<p><a href="/downloads/機械手臂/Camera contral.ttt">Camera contral.ttt</a></p>
<p>參考影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/E8EAB7ePr_Y" width="560"></iframe></p>
<p></p>
<h2>0511 Programming in C++</h2>
<p>圖檔:</p>
<p><a href="/downloads/機械手臂/programmingl in C++ Unclear.ttt">programmingl in C++ Unclear.ttt</a></p>
<p>簡介:</p>
<p>目前還尚未寫出(5/11)，在編譯上還有問題，問題跟"remoteAPI in C++"中的問題一樣</p>
<p>並且尚未能找到能改語言的方法</p>
<p></p>
<p><img alt="" height="891" src="/images/C_1.jpg" width="800"/></p>
<p><img alt="" height="636" src="/images/C_2.jpg" width="800"/></p>
<h2>參考資料</h2>
<p>coppeliasim 說明書</p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/index.html">https://www.coppeliarobotics.com/helpFiles/index.html</a></p>
<p>coppeliasim 官方教學</p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/index.html">https://www.coppeliarobotics.com/helpFiles/index.html</a></p>
<p>coppeliasim tutorial on youtube(播放清單</p>
<p><a href="https://www.youtube.com/watch?v=WJrqt27cYrU&amp;list=PLjzuoBhdtaXOoqkJUqhYQletLLnJP8vjZ&amp;index=3">https://www.youtube.com/watch?v=WJrqt27cYrU&amp;list=PLjzuoBhdtaXOoqkJUqhYQletLLnJP8vjZ&amp;index=3</a></p>
<p>Lua 程式指令</p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/index.html">https://www.coppeliarobotics.com/helpFiles/index.html</a></p>
<p>coppeliasim suctionPad</p>
<p><a href="https://www.youtube.com/watch?v=vRi2Up0yfyk&amp;t=1927s">https://www.youtube.com/watch?v=vRi2Up0yfyk&amp;t=1927s</a></p>
<p>Python remoteApi:</p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm">https://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm</a></p>
<p>C++ remoteApi 系統設定:</p>
<p><a href="https://blog.csdn.net/weixin_44745263/article/details/104555135">https://blog.csdn.net/weixin_44745263/article/details/104555135</a></p>
<p>github 範例:</p>
<p><a href="https://github.com/orivaldosantana/GPRo">https://github.com/orivaldosantana/GPRo</a></p>
<p>coppeliasim 相關論壇 (參考內容太多，故僅列論壇首頁</p>
<p><a href="https://forum.coppeliarobotics.com/index.php">https://forum.coppeliarobotics.com/index.php</a></p>
<p>coppeliasim 教學部落格</p>
<p><a href="https://www.jianshu.com/u/1e3e366da998">https://www.jianshu.com/u/1e3e366da998</a></p>
<p></p>
<p></p>
<h2>舊資料</h2>
<h3>0511 Programming in Lua on multiple program</h3>
<p>圖檔下載</p>
<p><a href="/downloads/機械手臂/programming in Lua in multiple program.ttt">programming in Lua in multiple program.ttt</a></p>
<p>簡介:</p>
<p>最基本的控制</p>
<p>在單一軸上對單一軸做程式控制</p>
<p>優點: 程式簡單，變數少</p>
<p>缺點: 要修改程式不易，有幾個程式就需要修改幾次</p>
<p><img alt="" height="427" src="/images/pro1.jpg" width="800"/></p>
<p><img alt="" height="495" src="/images/pro2.jpg" width="800"/></p>
<p><img alt="" height="828" src="/images/pro3.jpg" width="800"/></p>
<p><img alt="" height="587" src="/images/pro4.jpg" width="800"/></p>
<p><img alt="" height="543" src="/images/pro5.jpg" width="800"/></p>
<h3>0511 Programming in Lua in One program</h3>
<p>圖檔</p>
<p><a href="/downloads/機械手臂/programming in Lua in One program.ttt">programming in Lua in One program.ttt</a></p>
<p>簡介</p>
<p>使用單一程式進行控制</p>
<p>優點: 程式只有一個，所以可以在編寫上比較輕鬆</p>
<p>缺點: 程式較長，尋找特定函式較不易，變數較多程式控制還多，命名上須留意</p>
<p><img alt="" height="1091" src="/images/proall_1.jpg" width="800"/></p>
<p><img alt="" height="423" src="/images/proall_2.jpg" width="800"/></p>
<p></p>
<h2>Python remoteAPI</h2>
<p>在python的remoteApi 已經有整理資源包在下列倉儲了</p>
<p>只要寫完程式並且儲存在那個資源包裡面</p>
<p><a href="https://github.com/Blinhy0131/python-remoteApi">https://github.com/Blinhy0131/python-remoteApi</a></p>
<p>即可順利完成</p>
<p>註:建議使用Coppeliasim4.1進行編輯模擬</p>
<p>4.1相對4.2 有比較多的自由度可以編輯</p>
<h2>機械手臂多人對戰</h2>
<p>圖檔下載</p>
<p><a href="/downloads/robot arm fight">robot arm fight</a></p>
<p>場景設定:</p>
<p>需到根目錄之<span>remoteApiConnections.txt在最下方新增以下文字</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">portIndex2_port             = 19998
portIndex2_debug            = false
portIndex2_syncSimTrigger   = true</pre>
<p>然後需要打開cmd 輸入ipconfig 查看ipv4位置</p>
<p>再打開兩個主控程式將ipv4位置填入</p>
<p>示範影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/I0R_q5HuuOU" width="560"></iframe></p>
<p></p>
<p>構想來源</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cR-YlZ9NdIA" width="560"></iframe></p>
<p></p>
<h2>自動吹笛子機</h2>
<p>Stage1-bg6 自動吹笛子機remoteApi</p>
<p>控制:</p>
<p>f,d,s,j,k,l 分別控制六根不同的桿子往下</p>
<p>r,e,w,u,i,o 控制六根桿子往上</p>
<p></p>
<p>下載</p>
<p><a href="/downloads/吹笛子程式.rar">吹笛子程式.rar</a></p>
<p><a href="/downloads/自動吹笛子remoteApi.ttt">自動吹笛子remoteApi.ttt</a></p>
<p>參考影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OpoXLGUx0mQ" width="560"></iframe></p>
<p>程式參考</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import math
import random
import time
import keyboard
import math
#from winsound import Beep

 
print ('Start')
 

vrep.simxFinish(-1)

clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)
 
if clientID != -1:
    print ('Connected to remote API server')
     
    res = vrep.simxAddStatusbarMessage(
        clientID, "test-25",
        vrep.simx_opmode_oneshot)
    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):
        print("Could not add a message to the status bar.")
 
    
    opmode = vrep.simx_opmode_oneshot_wait
    STREAMING = vrep.simx_opmode_streaming
 
    
    vrep.simxStartSimulation(clientID, opmode)
    ret,joint1=vrep.simxGetObjectHandle(clientID,"Revolute3_1",opmode)
    ret,joint2=vrep.simxGetObjectHandle(clientID,"Revolute3_2",opmode)
    ret,joint3=vrep.simxGetObjectHandle(clientID,"Revolute3_3",opmode)
    ret,joint4=vrep.simxGetObjectHandle(clientID,"Revolute3_4",opmode)
    ret,joint5=vrep.simxGetObjectHandle(clientID,"Revolute3_5",opmode)
    ret,joint6=vrep.simxGetObjectHandle(clientID,"Revolute3_6",opmode)

    ret,joint01=vrep.simxGetObjectHandle(clientID,"joint0_1",opmode)
    ret,joint02=vrep.simxGetObjectHandle(clientID,"joint0_2",opmode)
    ret,joint03=vrep.simxGetObjectHandle(clientID,"joint0_3",opmode)
    ret,joint04=vrep.simxGetObjectHandle(clientID,"joint0_4",opmode)
    ret,joint05=vrep.simxGetObjectHandle(clientID,"joint0_5",opmode)
    ret,joint06=vrep.simxGetObjectHandle(clientID,"joint0_6",opmode)

    degr=-12*math.pi/180
    py=0.05
    set1=False
    set2=False
    set3=False
    set4=False
    set5=False
    set6=False

    vrep.simxSetJointTargetPosition(clientID,joint1,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint2,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint3,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint4,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint5,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint05,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint6,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint06,0,opmode)

    while True:
        
        if keyboard.is_pressed("f"):
            if set1==False:
                vrep.simxSetJointTargetPosition(clientID,joint1,degr,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint01,py,opmode)
                set1=True
        if keyboard.is_pressed("d"):
            if set2==False:
                vrep.simxSetJointTargetPosition(clientID,joint2,degr,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint02,py,opmode)
                set2=True
        if keyboard.is_pressed("s"):
            if set3==False:
                vrep.simxSetJointTargetPosition(clientID,joint3,degr,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint03,py,opmode)
                set3=True
        if keyboard.is_pressed("j"):
            if set4==False:
                vrep.simxSetJointTargetPosition(clientID,joint4,degr,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint04,py,opmode)
                set4=True
        if keyboard.is_pressed("k"):
            if set5==False:
                vrep.simxSetJointTargetPosition(clientID,joint5,degr,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint05,py,opmode)
                set5=True
        if keyboard.is_pressed("l"):
            if set6==False:
                vrep.simxSetJointTargetPosition(clientID,joint6,degr,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint06,py,opmode)
                set6=True

        
        if keyboard.is_pressed("r"):
            if set1==True:
                vrep.simxSetJointTargetPosition(clientID,joint1,0,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)
                set1=False
        if keyboard.is_pressed("e"):
            if set2==True:
                vrep.simxSetJointTargetPosition(clientID,joint2,0,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)
                set2=False
        if keyboard.is_pressed("w"):
            if set3==True:
                vrep.simxSetJointTargetPosition(clientID,joint3,0,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)
                set3=False
        if keyboard.is_pressed("u"):
            if set4==True:
                vrep.simxSetJointTargetPosition(clientID,joint4,0,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)
                set4=False
        if keyboard.is_pressed("i"):
            if set5==True:
                vrep.simxSetJointTargetPosition(clientID,joint5,0,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint05,0,opmode)
                set5=False
        if keyboard.is_pressed("o"):
            if set6==True:
                vrep.simxSetJointTargetPosition(clientID,joint6,0,opmode)
                vrep.simxSetJointTargetPosition(clientID,joint06,0,opmode)
                set6=False
        
        #if(set1==true ):
            #Beep(422, 3000) 
        
 
 
else:
    print ('Failed connecting to remote API server')
    print ('End')</pre>
<p></p>
<p></p>
<h2>3D列印機</h2>
<p>使用python remoteApi進行遠端控制</p>
<p>控制:</p>
<p>上下左右控制噴頭的上下左右</p>
<p>空白鍵往上</p>
<p>C鍵往下</p>
<p>圖檔</p>
<p><a href="/downloads/3D print remoteApi.rar">3D print remoteApi program</a></p>
<p><a href="/downloads/3D print remoteApi.ttt">3D print remoteApi.ttt</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Ib3lePX2Pn0" width="560"></iframe></p>
<p>程式參考</p>
<p>5/18 程式修改:將顯示的數值由公尺轉成毫米並且去掉多餘的小數點</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import math
import random
import time
import keyboard
 
print ('Start')
 
# Close eventual old connections
vrep.simxFinish(-1)

# Connect to V-REP remote server
clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)
 
if clientID != -1:
    print ('Conipconfigected to remote API server')
    
    res = vrep.simxAddStatusbarMessage(
        clientID, "40823214",
        vrep.simx_opmode_oneshot)
    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):
        print("Could not add a message to the status bar.")
 

    opmode = vrep.simx_opmode_oneshot_wait
    STREAMING = vrep.simx_opmode_streaming

    vrep.simxStartSimulation(clientID, opmode)

    ret,joint1=vrep.simxGetObjectHandle(clientID,"X",opmode)
    ret,joint2=vrep.simxGetObjectHandle(clientID,"Y",opmode)
    ret,joint3=vrep.simxGetObjectHandle(clientID,"Z",opmode)
    dx=0
    dy=0
    dz=0
    dt=0.005
    cont=0
    rangeR=0.013
    max_h=0.35
    vrep.simxSetJointTargetPosition(clientID,joint1,dx,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint2,dx,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint3,dx,opmode)

    while True:
        #Clockwise
        if keyboard.is_pressed("8"):
            dx=dx+dt
            cont=float(math.pow(dx,2)+math.pow(dy,2))
            if cont&lt;rangeR:
                vrep.simxSetJointTargetPosition(clientID,joint1,dx,opmode)
                print(round(dx*1000,1),round(dy*1000,1),round(dz*1000,1))
            else:
                print("Out of range")
                dx=dx-dt
        if keyboard.is_pressed("2"):
            dx=dx-dt
            cont=float(math.pow(dx,2)+math.pow(dy,2))
            if cont&lt;rangeR:
                vrep.simxSetJointTargetPosition(clientID,joint1,dx,opmode)
                print(round(dx*1000,1),round(dy*1000,1),round(dz*1000,1))
            else:
                print("Out of range")
                dx=dx+dt
        if keyboard.is_pressed("4"):
            dy=dy+dt
            cont=float(math.pow(dx,2)+math.pow(dy,2))
            if cont&lt;rangeR:
                vrep.simxSetJointTargetPosition(clientID,joint2,dy,opmode)
                print(round(dx*1000,1),round(dy*1000,1),round(dz*1000,1))
            else:
                print("Out of range")
                dy=dy-dt
        if keyboard.is_pressed("6"):
            dy=dy-dt
            cont=float(math.pow(dx,2)+math.pow(dy,2))
            if cont&lt;rangeR:
                vrep.simxSetJointTargetPosition(clientID,joint2,dy,opmode)
                print(round(dx*1000,1),round(dy*1000,1),round(dz*1000,1))
            else:
                print("Out of range")
                dy=dy+dt
        if keyboard.is_pressed("space"):    
            dz=dz+dt   
            if dz&lt;max_h:       
                vrep.simxSetJointTargetPosition(clientID,joint3,dz,opmode)
                print(round(dx*1000,1),round(dy*1000,1),round(dz*1000,1))
            else:
                print("too high")
                dz=dz-dt 
        if keyboard.is_pressed("c"):
            dz=dz-dt
            if dz&lt;0:
                print("too low")
                dz=0
            else:
                vrep.simxSetJointTargetPosition(clientID,joint3,dz,opmode)
                print(round(dx*1000,1),round(dy*1000,1),round(dz*1000,1))
    else:
        print ('Failed connecting to remote API server')
        print ('End')</pre>
<p></p>
<h2>W13 Pick and Place remoteApi</h2>
<h3>0601</h3>
<p>圖檔參考</p>
<p><a href="https://github.com/40823225/stage3-bg6/tree/main/downloads/Pick%20and%20Place%20remote%20control">Pick and Place</a></p>
<p>角度控制解說</p>
<p><a href="https://40823225.github.io/stage3-bg6/content/%E8%A8%88%E7%AE%97%E8%A7%92%E5%BA%A6.html">https://40823225.github.io/stage3-bg6/content/%E8%A8%88%E7%AE%97%E8%A7%92%E5%BA%A6.html</a></p>
<p>影片參考</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lgBP-Mw2nIY" width="560"></iframe></p>
<p>程式參考(python remoteApi)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import math
import random
import time
import math

def rotate_motor(x,y,z,switch):
    x=float(x)
    y=float(y)
    z=float(z)
    deg1=math.atan(x/(1.415-y))
    x=1.415-(1.415-y)/math.cos(deg1)
    length=math.pow((math.pow(0.2,2)+math.pow(1.082,2)),0.5)
    distance=math.pow((math.pow(1.082-x,2)+math.pow(0.96-z,2)),0.5)
    perimeter=(length+distance+0.76)/2
    area=math.pow(perimeter*(perimeter-length)*(perimeter-distance)*(perimeter-0.76),0.5)
    high=2*area/distance
    joint2_after_sita=math.asin(high/0.76)
    joint2_zero_sita=math.atan((1.082-x)/(0.96-z))
    deg2=joint2_after_sita-joint2_zero_sita
    joint3_base=math.atan(1.082/0.2)
    angle_joint3=math.acos(high/length)
    deg3=(90*math.pi/180)+joint2_after_sita-angle_joint3-joint3_base
    deg4=deg2-deg3
    if switch==1:
        vrep.simxSetJointTargetPosition(clientID,joint01,deg1,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint02,deg2,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint03,(-deg3),opmode)
        vrep.simxSetJointTargetPosition(clientID,joint04,(-deg4),opmode)
    if switch==2:
        vrep.simxSetJointTargetPosition(clientID,joint03,(-deg3),opmode)
        time.sleep(0.2)
        vrep.simxSetJointTargetPosition(clientID,joint01,deg1,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint02,deg2,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint04,(-deg4),opmode)

def signal_switch(singal):

    if singal==1 :
        vrep.simxSetIntegerSignal(clientID,"call_1",1,opmode) #here might have a error
    if singal==2 :
        vrep.simxSetIntegerSignal(clientID,"call_2",1,opmode)
    if singal==3 :
        vrep.simxSetIntegerSignal(clientID,"call_3",1,opmode)
    if singal==4 :
        vrep.simxSetIntegerSignal(clientID,"call_4",1,opmode)
    if singal==5 :
        vrep.simxSetIntegerSignal(clientID,"call_5",1,opmode)
    if singal==6 :
        vrep.simxSetIntegerSignal(clientID,"call_6",1,opmode)
    if singal==12:
        vrep.simxSetIntegerSignal(clientID,'call_1',0,opmode) #here might have a error
    if singal==11:
        vrep.simxSetIntegerSignal(clientID,"call_2",0,opmode)
    if singal==10:
        vrep.simxSetIntegerSignal(clientID,"call_3",0,opmode)
    if singal==9:
        vrep.simxSetIntegerSignal(clientID,"call_4",0,opmode)
    if singal==8:
        vrep.simxSetIntegerSignal(clientID,"call_5",0,opmode)
    if singal==7:
        vrep.simxSetIntegerSignal(clientID,"call_6",0,opmode)

def clean():
    vrep.simxSetIntegerSignal(clientID,"call_1",0,opmode)
    vrep.simxSetIntegerSignal(clientID,"call_2",0,opmode)
    vrep.simxSetIntegerSignal(clientID,"call_3",0,opmode)
    vrep.simxSetIntegerSignal(clientID,"call_4",0,opmode)
    vrep.simxSetIntegerSignal(clientID,"call_5",0,opmode)
    vrep.simxSetIntegerSignal(clientID,"call_6",0,opmode)

print ('Start')
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19997, True, True, 5000, 5)
  
if clientID != -1:
    print ('Connected to remote API server')
      
    res = vrep.simxAddStatusbarMessage(
        clientID, "pad testing",
        vrep.simx_opmode_oneshot)
    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):
        print("Could not add a message to the status bar.")
  
     
    opmode = vrep.simx_opmode_oneshot_wait
    STREAMING = vrep.simx_opmode_streaming
  
     
    vrep.simxStartSimulation(clientID, opmode)
    ret,joint01=vrep.simxGetObjectHandle(clientID,"joint1",opmode)
    ret,joint02=vrep.simxGetObjectHandle(clientID,"joint2",opmode)
    ret,joint03=vrep.simxGetObjectHandle(clientID,"joint3",opmode)
    ret,joint04=vrep.simxGetObjectHandle(clientID,"joint4",opmode)
    ret,jointr=vrep.simxGetObjectHandle(clientID,"Rotate",opmode)
    tt=1.5
    long_t=3
    long_long_t=3 #time set
    rotate_deg=0 #pad rotate
    atz=0  #altitude set
    setx=-0.5
    setpx=0.5 #center pick set
    sety=0.16
    setpy=0.16 #center fall set
    cube=1              # set cube
    ball_pick_time=0    #total ball we pick
    ball_put_time=31     #total ball we put
    put_cont=0          # print the ball we put
    pick_high=['0.0645','0.134','0.202','0.2785'] #pick up high set
    fall_high=['0.05','0.12','0.18','0.26'] #fall high set
    high_up=['0','0','0.05','0.12']

    
    

    while True :
        clean() #clean all the 
        vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,jointr,0,opmode)
        time.sleep(tt)
        for ball in range(1,7,1):
            ball_pick_time=ball_pick_time+1 #total time we pick
            i=1
            unit=0
            level=0
            while level &lt; ball_pick_time :  #find which level and place should be of the xy coordinates
                unit=unit+1
                level=level+unit**2
            finding_XY=ball_pick_time  #this is the XY on that floor
            while i&lt;=unit-1:
                finding_XY=finding_XY-(i**2) 
                i=i+1
            X_Pos=finding_XY%unit  #the X and Y coordinates(by balls)
            if X_Pos==0:
                X_Pos=unit
            Y_Pos=(math.ceil(finding_XY/unit)) 
            BaseX=setx-((unit-1)*0.05)#now we need to find the 0 of the xy
            BaseY=sety-((unit-1)*0.05)
            #vrep.simxSetJointTargetPosition(clientID,joint01,BaseX+(0.1*(X_Pos-1)),opmode)
            #time.sleep(tt)
            rotate_motor(BaseX+(0.1*(X_Pos-1)),BaseY+(0.1*(Y_Pos-1)),high_up[(unit-1)],1)
            time.sleep(tt)
            print("Picking up the ball nember",ball_pick_time,"...")
            signal_switch(ball)
            rotate_motor(BaseX+(0.1*(X_Pos-1)),BaseY+(0.1*(Y_Pos-1)),pick_high[(unit-1)],1)
            time.sleep(tt)
            rotate_motor(BaseX+(0.1*(X_Pos-1)),BaseY+(0.1*(Y_Pos-1)),high_up[(unit-1)],2)
            time.sleep(tt)
            rotate_deg=rotate_deg+60
            vrep.simxSetJointTargetPosition(clientID,jointr,rotate_deg*math.pi/180,opmode)
            time.sleep(tt)
        vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)
        vrep.simxSetJointTargetPosition(clientID,jointr,0,opmode)
        time.sleep(tt)
        for ball in range(1,7,1):
            ball_put_time=ball_put_time-1 #total time we put
            put_cont=put_cont+1
            i=1
            unit=0
            level=0
            while level &lt; ball_put_time :
                unit=unit+1
                level=level+unit**2
            finding_XY=ball_put_time 
            while i&lt;=unit-1:
                finding_XY=finding_XY-(i**2) 
                i=i+1
            X_Pos=finding_XY%unit
            if X_Pos==0:
                X_Pos=unit
            Y_Pos=(math.ceil(finding_XY/unit)) 
            BaseX=setpx-((unit-1)*0.05)#now we need to find the 0 of the xy
            BaseY=setpy-((unit-1)*0.05)
            rotate_deg=rotate_deg-60
            vrep.simxSetJointTargetPosition(clientID,jointr,rotate_deg*math.pi/180,opmode)
            time.sleep(tt)
            rotate_motor(BaseX+(0.1*(X_Pos-1)),BaseY+(0.1*(Y_Pos-1)),high_up[(unit-1)],1)
            time.sleep(tt)
            print("Putting the ball nember",put_cont,"...")
            rotate_motor(BaseX+(0.1*(X_Pos-1)),BaseY+(0.1*(Y_Pos-1)),fall_high[(unit-1)],1)
            time.sleep(tt)
            signal_switch((ball+6))
            time.sleep(0.5)
            rotate_motor(BaseX+(0.1*(X_Pos-1)),BaseY+(0.1*(Y_Pos-1)),high_up[(unit-1)],1)
            time.sleep(tt)
        if ball_pick_time==30:
            pick_high=['0.07','0.135','0.207','0.278']
            setx=-setx
            setpx=-setpx
            ball_pick_time=0
            ball_put_time=31
            put_cont=0</pre>
<p></p>
<h3>0524</h3>
<p>圖檔</p>
<p><a href="https://github.com/40823225/stage3-bg6/tree/main/downloads/W13_40823214">W13 Pick and Place</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/L9Q6STVJBw0" width="560"></iframe></p>
<p></p>
<h2>remoteAPI in C++</h2>
<h3>0511</h3>
<p>嘗試以C++最為remoteAPI控制的語言</p>
<p>compiler為code block in Win10</p>
<p>不論怎麼修改在</p>
<p>後還是出現問題</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">simxGetObjectHandle(clientID, "joint1", &amp;joint01, simx_opmode_oneshot_wait);</pre>
<p>上程式片段中</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">simx_opmode_oneshot_wait</pre>
<p>此定義一直出現error，內容如下</p>
<p>error: 'simx_opmode_oneshot_wait' was not declared in this scope</p>
<p>中譯: <span>simx_opmode_oneshot_wait 定義不明</span></p>
<p><span>但是在尋找網路上的範例，寫法也都是如我程式中一樣，目前還在尋找解決方法</span></p>
<p><span><img alt="" height="160" src="/images/codeblock.jpg" width="800"/></span></p>
<p><span></span></p>
<p><span>附上程式</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;Windows.h&gt;
#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;


extern "C" {
    #include "remoteAPI/extApi.h"
}



using namespace std;

int main(){
    int clientID = 0;
    simxFinish(-1);
    clientID = simxStart((simxChar*)"127.0.0.1", 19997, true, true, 5000, 5);
    Sleep(1);
    if (clientID != -1)
    {
        int joint01;
        int joint02;
        int joint03;
        int joint04;
        int joint05;
        simxGetObjectHandle(clientID, "joint1", &amp;joint01, simx_opmode_oneshot_wait);//setting
        simxGetObjectHandle(clientID, "joint2", &amp;joint02, simx_opmode_oneshot_wait);
        simxGetObjectHandle(clientID, "joint3", &amp;joint03, simx_opmode_oneshot_wait);
        simxGetObjectHandle(clientID, "joint4", &amp;joint04, simx_opmode_oneshot_wait);
        simxGetObjectHandle(clientID, "joint5", &amp;joint05, simx_opmode_oneshot_wait);


        float degset01=-11.9;
        float degset02=34.69;
        float degset03=-20.2;
        float degset04=-11.9;
        float degset05=-11.9;
        float dif=1;

        //angle set0
        simxSetJointTargetPosition(clientID,joint01,degset01,simx_opmode_oneshot);
        simxSetJointTargetPosition(clientID,joint02,degset02,simx_opmode_oneshot);
        simxSetJointTargetPosition(clientID,joint03,degset03,simx_opmode_oneshot);
        simxSetJointTargetPosition(clientID,joint04,degset04,simx_opmode_oneshot);
        simxSetJointTargetPosition(clientID,joint05,degset05,simx_opmode_oneshot);
        bool balance_contral=true;


        clientID,auxiliaryData=simGetSimulatorMessage();


        while (clientID!=-1) {
            if (clientID==simxmessage_keypress) {
                if (auxiliaryData[1]==2009) { //up Key
                    degset01=degset01+dif;
                    simxSetJointTargetPosition(clientID,joint01,degset01,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==2010) { //down key
                    degset01=degset01-dif;
                    simxSetJointTargetPosition(clientID,joint01,degset01,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==2007) { //left key
                    degset02=degset02+dif;
                    simxSetJointTargetPosition(clientID,joint02,degset02,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==2008) {  //right key
                    degset02=degset02-dif;
                    simxSetJointTargetPosition(clientID,joint02,degset02,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==56) { //num8 key
                    degset03=degset03+dif;
                    simxSetJointTargetPosition(clientID,joint03,degset03,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==50) { //num2 key
                    degset03=degset03-dif;
                    simxSetJointTargetPosition(clientID,joint03,degset03,simx_opmode_oneshot);

                }
                if (auxiliaryData[1]==54) { //num6 key
                    degset04=degset04+dif;
                    simxSetJointTargetPosition(clientID,joint04,degset04,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==52) { //num4 key
                    degset04=degset04-dif;
                    simxSetJointTargetPosition(clientID,joint04,degset04,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==49) { //mun1 key
                    degset05=degset05+dif;
                    simxSetJointTargetPosition(clientID,joint05,degset05,simx_opmode_oneshot);
                }
                if (auxiliaryData[1]==51) { //num3 key
                    degset05=degset05-dif;
                    simxSetJointTargetPosition(clientID,joint05,degset05,simx_opmode_oneshot);
                }




                if  (auxiliaryData[1]==48){ //setting auto Balance at num0 key
                    if (balance_contral==true){
                        balance_contral=false;
                    }else{
                        balance_contral=true;
                    }
                }
                if (balance_contral==true) {
                    if (auxiliaryData[1]==2007) {
                        degset03=degset03+dif ;
                        simxSetJointTargetPosition(clientID,joint03,degset03,simx_opmode_oneshot);
                    }
                    if (auxiliaryData[1]==2008) {
                        degset03=degset03-dif;
                        simxSetJointTargetPosition(clientID,joint03,degset03,simx_opmode_oneshot);
                        }
                    }
                }
        clientID,auxiliaryData=simGetSimulatorMessage();
        }
    }
    simxFinish(clientID);
    return clientID;
}
</pre>
<p><br/><br/></p>
<h3>0512</h3>
<p>後來上網尋找解答發現疑似是complier的問題</p>
<p>於是切換為VS2019進行編譯</p>
<p>並且新增path及include至專案檔</p>
<p>在X64的環境下進行DeBug後</p>
<p>第一個錯誤是這個</p>
<p><img caption="false" height="164" src="/images/error01.jpg" width="450"/></p>
<p>並且出現以下錯誤</p>
<p><img alt="" height="147" src="/images/1620920746110.jpg" width="450"/></p>
<p>C4244為警示狀態外，其他錯誤經查詢發現似乎不能啟動"remotaApi.dll"的這個程式</p>
<p></p>
<p></p>
<h3>0512-2</h3>
<p>後來經過修改與PATH路徑修正</p>
<p>並且將remotaApi所需的標頭檔</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;exApi.h&gt;</pre>
<p>將其修改程式變成</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">extern "C" {
    #include "exApi.h" 
}</pre>
<p>但是似乎還是一樣</p>
<p><img alt="" height="321" src="/images/VS2019.jpg" width="800"/></p>
<p>目前正在尋找其他解法來修復</p>
<p></p>
<p></p>
<h2>remoteApi in Lua</h2>
<h3>0513</h3>
<p>..</p>
<p>..</p>
<h1>個人紀錄</h1>
<p>.</p>
<h2>CoppeliaSim 教學</h2>
<h3>軸的旋轉教學</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/-8QNOsZnV1c" width="560"></iframe></p>
<p>注意事項:在旋轉軸中預設的角度單位為弧度(rad)</p>
<p>所以在進行旋轉控制的時候要記得轉換成弧度(math.pi/180)</p>
<p>程式碼</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    joint=sim.getObjectHandle('joint01')
end

function sysCall_actuation()
    -- put your actuation code here
    sim.setJointTargetPosition(joint,135*math.pi/180)
end</pre><h3>直線運動教學</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/KHClnqMEHfU" width="560"></iframe></p>
<p>程式指令</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    joint=sim.getObjectHandle('joint')
end

function sysCall_actuation()
    -- put your actuation code here
    sim.setJointTargetPosition(joint,50)
end</pre>
<h3>1-單軸直線運動</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ZbITEg3IuAc" width="560"></iframe></p>
<p>程式碼</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    joint=sim.getObjectHandle('joint')
    set=0
end
 
function sysCall_actuation()
    -- put your actuation code here
    message,auiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if(message==sim.message_keypress)then
            if(auiliaryData[1]==2009)then
                set=set+0.01
                sim.setJointTargetPosition(joint,set)
            end
        end
    message,auiliaryData=sim.getSimulatorMessage()
    end
end</pre>
<p></p>
<h3>2-可變速之旋轉運動</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7ui7HK5A3l4" width="560"></iframe></p>
<p>程式碼  (注:下方程式碼有修改 degset(每次旋轉的角度)不會小於1</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    joint=sim.getObjectHandle('joint')
    set=0
    degset=1
end
 
function sysCall_actuation()
    -- put your actuation code here
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==2009) then
            set=set+degset
            sim.setJointTargetPosition(joint,set*math.pi/180)
            end
            if (auxiliaryData[1]==2010) then
            set=set-degset
            sim.setJointTargetPosition(joint,set*math.pi/180)
            end
            if (auxiliaryData[1]==2007) then
                degset=degset+5
                print(degset)
            end
            if (auxiliaryData[1]==2008) then
                degset=degset-5
                if(degset&lt;1) then
                    degset=1
                end
                print(degset)
            end
        end
    message,auxiliaryData=sim.getSimulatorMessage()
    end
end
    </pre>
<h3>3-遙控攝影小汽車</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nNmpBqzVHT0" width="560"></iframe></p>
<p>範例程式碼</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
    f=sim.getObjectHandle('F')
    r=sim.getObjectHandle('R')
    speedf=10
    speedr=10
    Cam1=sim.getObjectHandle('Camera')
    CamView1=sim.floatingViewAdd(0.2,0.8,0.5,0.5,0)
    sim.adjustView(CamView1,Cam1,64)
end

function sysCall_cleanup() 
    sim.floatingViewRemove(CamView1)
end 
 
function sysCall_actuation()
    -- put your actuation code here
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==2007) then
                speedf=speedf-30
                speedr=speedr-30
                sim.setJointTargetPosition(f,speedf*math.pi/180)
                sim.setJointTargetPosition(r,speedr*math.pi/180)
            end
            if (auxiliaryData[1]==2008) then
                speedf=speedf+30
                speedr=speedr+30
                sim.setJointTargetPosition(f,speedf*math.pi/180)
                sim.setJointTargetPosition(r,speedr*math.pi/180)
            end
            if (auxiliaryData[1]==2009) then
                speedr=speedr-30
                sim.setJointTargetPosition(r,speedr*math.pi/180)
            end
            if (auxiliaryData[1]==2010) then
                speedf=speedf-30
                sim.setJointTargetPosition(f,speedf*math.pi/180)
            end
        end
    message,auxiliaryData=sim.getSimulatorMessage()
    end
end</pre>
<p></p>
<h3>CODE 指令解說</h3>
<p>部分LUA指令講解</p>
<p><strong>1.sim.getObjectHandle</strong></p>
<p>使用範例如下</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">XXX=sim.getObjectHandle('joint')</pre>
<p>講解 XXX為一個自行定義的名詞，此指令為定義XXX為一個連接軸，而('joint')為該軸在場景裡面的名稱</p>
<p></p>
<p><strong>2.sim.setJointTargetPosition</strong></p>
<p><span>使用範例如下</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sim.setJointTargetPosition(XXX,90)</pre>
<p>講解 XXX移動至90這個位置，或旋轉至90rad，XXX請參見第一個指令講解,角度預設為RAD</p>
<p>若要需求為旋轉至90deg，指令參考如下</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sim.setJointTargetPosition(XXX,90*math.pi/180)</pre>
<p></p>
<p><strong>3.sim.getSimulatorMessage</strong></p>
<p>使用範例如下</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">message,auxiliaryData=sim.getSimulatorMessage()
while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==2009) then
               指定要做的事情
            end
         end
message,auxiliaryData=sim.getSimulatorMessage()
end
</pre>
<p></p>
<p>講解</p>
<p>第一行</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">message,auxiliaryData=sim.getSimulatorMessage()</pre>
<p>message代表跟鍵盤對接的狀態</p>
<p>auxiliaryData代表讀取到鍵盤的值</p>
<p>第二行的開始</p>
<p>當(while)"message的值不等於-1時</p>
<p>若(if)<span>auxiliaryData讀取到的值為2009</span></p>
<p><span>進行要做的事情，可以是上面第二項"sim.setJointTargetPosition"或其他指令</span></p>
<p><span>可參考<a href="https://40823225.github.io/stage3-bg6/content/%E5%B0%8B%E6%89%BE%E6%8E%A7%E5%88%B6%E4%BB%A3%E7%A2%BC.html">尋找控制代碼</a></span></p>
<p><span></span></p>
<p><strong>4.simwat</strong></p>
<p><span>使用範例</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sim.wait(0.01)</pre>
<p>只能在線程控制中使用(Threaded chil script)</p>
<p>為暫停指令，括弧內單位為秒</p>
<h3>remoteApi python 指令對照</h3>
<p><strong>1.simxGetObjectHandle</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">ret,XXX=vrep.simxGetObjectHandle(clientID,"joint",opmode)</pre>
<p><span>XXX為一個自行定義的名詞，此指令為定義XXX為一個連接軸，而('joint')為該軸在場景裡面的名稱</span></p>
<p>與Lua語法類似</p>
<p><strong>2.simxSetJointTargetPosition</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"> vrep.simxSetJointTargetPosition(clientID,XXX,90,opmode)</pre>
<p>講解 XXX移動至90這個位置，或旋轉至90rad，XXX請參見第一個指令講解,角度預設為RAD</p>
<p>若要需求為旋轉至90deg，指令參考如下</p>
<p><span>與Lua語法類似</span></p>
<h3>機械手臂設定範例</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/s8eRsonlKHo" width="560"></iframe></p>
<p></p>
<h3>按鍵控制代碼</h3>
<table border="1" cellpadding="0" cellspacing="0" style="width: 590px;">
<tbody>
<tr style="height: 26px;">
<td style="width: 40px; height: 26px; text-align: center;"><strong>按鍵</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">對應代碼</td>
<td style="width: 34px; height: 26px; text-align: center;"><strong>按鍵</strong></td>
<td style="width: 69px; height: 26px; text-align: center;"><span>對應代碼</span></td>
<td style="width: 45px; height: 26px; text-align: center;"><strong>按鍵</strong></td>
<td style="width: 64px; height: 26px; text-align: center;"><span>對應代碼</span></td>
<td style="width: 50px; height: 26px; text-align: center;"><strong>按鍵</strong></td>
<td style="width: 71px; height: 26px; text-align: center;"><span>對應代碼</span></td>
<td style="width: 42px; height: 26px; text-align: center;"><strong>按鍵</strong></td>
<td style="width: 62px; height: 26px; text-align: center;"><span>對應代碼</span></td>
<td style="width: 40.9271px; height: 26px; text-align: center;"><strong>按鍵</strong></td>
<td style="width: 74.0729px; height: 26px; text-align: center;"><span>對應代碼</span></td>
</tr>
<tr style="height: 26px;">
<td style="width: 40px; height: 26px; text-align: center;"><strong>a</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">97</td>
<td style="width: 34px; height: 26px; text-align: center;"><strong>j</strong></td>
<td style="width: 69px; height: 26px; text-align: center;">106</td>
<td style="width: 45px; height: 26px; text-align: center;"><strong>s</strong></td>
<td style="width: 64px; height: 26px; text-align: center;">115</td>
<td style="width: 50px; height: 26px; text-align: center;"><strong>0</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">48</td>
<td style="width: 42px; height: 26px; text-align: center;"><strong>9</strong></td>
<td style="width: 62px; height: 26px; text-align: center;">57</td>
<td style="width: 40.9271px; height: 26px; text-align: center;"><strong>.</strong></td>
<td style="width: 74.0729px; height: 26px; text-align: center;">46</td>
</tr>
<tr style="height: 26px;">
<td style="width: 40px; height: 26px; text-align: center;"><strong>b</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">98</td>
<td style="width: 34px; height: 26px; text-align: center;"><strong>k</strong></td>
<td style="width: 69px; height: 26px; text-align: center;">107</td>
<td style="width: 45px; height: 26px; text-align: center;"><strong>t</strong></td>
<td style="width: 64px; height: 26px; text-align: center;">116</td>
<td style="width: 50px; height: 26px; text-align: center;"><strong>1</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">49</td>
<td style="width: 42px; height: 26px; text-align: center;"><strong>+</strong></td>
<td style="width: 62px; height: 26px; text-align: center;">43</td>
<td style="width: 40.9271px; height: 26px; text-align: center;"><strong>;</strong></td>
<td style="width: 74.0729px; height: 26px; text-align: center;">59</td>
</tr>
<tr style="height: 26px;">
<td style="width: 40px; height: 26px; text-align: center;"><strong>c</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">99</td>
<td style="width: 34px; height: 26px; text-align: center;"><strong>l</strong></td>
<td style="width: 69px; height: 26px; text-align: center;">108</td>
<td style="width: 45px; height: 26px; text-align: center;"><strong>u</strong></td>
<td style="width: 64px; height: 26px; text-align: center;">117</td>
<td style="width: 50px; height: 26px; text-align: center;"><strong>2</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">50</td>
<td style="width: 42px; height: 26px; text-align: center;"><strong>-</strong></td>
<td style="width: 62px; height: 26px; text-align: center;">45</td>
<td style="width: 40.9271px; height: 26px; text-align: center;"><strong>'</strong></td>
<td style="width: 74.0729px; height: 26px; text-align: center;">39</td>
</tr>
<tr style="height: 26px;">
<td style="width: 40px; height: 26px; text-align: center;"><strong>d</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">100</td>
<td style="width: 34px; height: 26px; text-align: center;"><strong>m</strong></td>
<td style="width: 69px; height: 26px; text-align: center;">109</td>
<td style="width: 45px; height: 26px; text-align: center;"><strong>v</strong></td>
<td style="width: 64px; height: 26px; text-align: center;">118</td>
<td style="width: 50px; height: 26px; text-align: center;"><strong>3</strong></td>
<td style="width: 71px; height: 26px; text-align: center;">51</td>
<td style="width: 42px; height: 26px; text-align: center;"><strong>*</strong></td>
<td style="width: 62px; height: 26px; text-align: center;">42</td>
<td style="width: 40.9271px; height: 26px; text-align: center;"><strong>[</strong></td>
<td style="width: 74.0729px; height: 26px; text-align: center;">91</td>
</tr>
<tr style="height: 28px;">
<td style="width: 40px; height: 28px; text-align: center;"><strong>e</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">101</td>
<td style="width: 34px; height: 28px; text-align: center;"><strong>n</strong></td>
<td style="width: 69px; height: 28px; text-align: center;">110</td>
<td style="width: 45px; height: 28px; text-align: center;"><strong>w</strong></td>
<td style="width: 64px; height: 28px; text-align: center;">119</td>
<td style="width: 50px; height: 28px; text-align: center;"><strong>4</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">52</td>
<td style="width: 42px; height: 28px; text-align: center;"><strong>/</strong></td>
<td style="width: 62px; height: 28px; text-align: center;">47</td>
<td style="width: 40.9271px; height: 28px; text-align: center;"><strong>]</strong></td>
<td style="width: 74.0729px; height: 28px; text-align: center;">93</td>
</tr>
<tr style="height: 28.1597px;">
<td style="width: 40px; height: 28.1597px; text-align: center;"><strong>f</strong></td>
<td style="width: 71px; height: 28.1597px; text-align: center;">102</td>
<td style="width: 34px; height: 28.1597px; text-align: center;"><strong>o</strong></td>
<td style="width: 69px; height: 28.1597px; text-align: center;">111</td>
<td style="width: 45px; height: 28.1597px; text-align: center;"><strong>x</strong></td>
<td style="width: 64px; height: 28.1597px; text-align: center;">120</td>
<td style="width: 50px; height: 28.1597px; text-align: center;"><strong>5</strong></td>
<td style="width: 71px; height: 28.1597px; text-align: center;">53</td>
<td style="width: 42px; height: 28.1597px; text-align: center;"><strong>=</strong></td>
<td style="width: 62px; height: 28.1597px; text-align: center;">61</td>
<td style="width: 40.9271px; height: 28.1597px; text-align: center;"><strong>方向鍵上</strong></td>
<td style="width: 74.0729px; height: 28.1597px; text-align: center;">2007</td>
</tr>
<tr style="height: 28px;">
<td style="width: 40px; height: 28px; text-align: center;"><strong>g</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">103</td>
<td style="width: 34px; height: 28px; text-align: center;"><strong>p</strong></td>
<td style="width: 69px; height: 28px; text-align: center;">112</td>
<td style="width: 45px; height: 28px; text-align: center;"><strong>y</strong></td>
<td style="width: 64px; height: 28px; text-align: center;">121</td>
<td style="width: 50px; height: 28px; text-align: center;"><strong>6</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">54</td>
<td style="width: 42px; height: 28px; text-align: center;"><strong>`</strong></td>
<td style="width: 62px; height: 28px; text-align: center;">96</td>
<td style="width: 40.9271px; height: 28px; text-align: center;"><strong>方向鍵下</strong></td>
<td style="width: 74.0729px; height: 28px; text-align: center;">2008</td>
</tr>
<tr style="height: 28px;">
<td style="width: 40px; height: 28px; text-align: center;"><strong>h</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">104</td>
<td style="width: 34px; height: 28px; text-align: center;"><strong>q</strong></td>
<td style="width: 69px; height: 28px; text-align: center;">113</td>
<td style="width: 45px; height: 28px; text-align: center;"><strong>z</strong></td>
<td style="width: 64px; height: 28px; text-align: center;">122</td>
<td style="width: 50px; height: 28px; text-align: center;"><strong>7</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">55</td>
<td style="width: 42px; height: 28px; text-align: center;"><strong>\</strong></td>
<td style="width: 62px; height: 28px; text-align: center;">92</td>
<td style="width: 40.9271px; height: 28px; text-align: center;"><strong>方向鍵左</strong></td>
<td style="width: 74.0729px; height: 28px; text-align: center;">2009</td>
</tr>
<tr style="height: 28px;">
<td style="width: 40px; height: 28px; text-align: center;"><strong>i</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">105</td>
<td style="width: 34px; height: 28px; text-align: center;"><strong>r</strong></td>
<td style="width: 69px; height: 28px; text-align: center;">114</td>
<td style="width: 45px; height: 28px; text-align: center;">空白鍵</td>
<td style="width: 64px; height: 28px; text-align: center;">32</td>
<td style="width: 50px; height: 28px; text-align: center;"><strong>8</strong></td>
<td style="width: 71px; height: 28px; text-align: center;">56</td>
<td style="width: 42px; height: 28px; text-align: center;"><strong>,</strong></td>
<td style="width: 62px; height: 28px; text-align: center;">44</td>
<td style="width: 40.9271px; height: 28px; text-align: center;"><strong>方向鍵右</strong></td>
<td style="width: 74.0729px; height: 28px; text-align: center;">2010</td>
</tr>
</tbody>
</table>
<p></p>
<h2>期末全班直播教學</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GUUKSgN93eI" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gZd9KlVS9BI" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Zu_0BvZfxgQ" width="560"></iframe></p>